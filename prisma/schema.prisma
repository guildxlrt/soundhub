// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model UserAuth {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  status    String

  email    String @unique
  password String
  role     String

  artists  Artist[]
  events   Event[]
  announce Announce[]
  record   Record[]
}

model Artist {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  status    String

  user_auth_id Int      @unique
  user         UserAuth @relation(fields: [user_auth_id], references: [id], onDelete: Cascade)

  name     String   @unique
  bio      String?
  members  Json
  genres   String[]
  website  String?
  country  String?
  logoPath String?

  playAtEvent  PlayAtEvent[]
  songsFeats   SongFeat[]
  recordArtist RecordArtist[]
}

model Label {
  id     Int    @id @default(autoincrement())
  status String

  name         String   @unique
  creationDate DateTime
  bio          String?
  website      String?
  country      String?
  logoPath     String?

  recordsLabels RecordLabel[]
}

model Announce {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  status    String

  createdBy Int
  publisher UserAuth @relation(fields: [createdBy], references: [id], onDelete: Cascade)

  title     String
  text      String
  imagePath String?
}

model Event {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  status    String

  createdBy   Int
  organisator UserAuth @relation(fields: [createdBy], references: [id], onDelete: Cascade)

  date      DateTime
  place     String
  title     String
  text      String
  imagePath String?

  playAtEvent PlayAtEvent[]
}

model Record {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  status    String

  createdBy Int
  publisher UserAuth @relation(fields: [createdBy], references: [id], onDelete: Cascade)

  title      String
  recordType String
  descript   String?
  price      Int?
  genres     String[]
  folderPath String

  songs          Song[]
  recordsArtists RecordArtist[]
  recordsLabels  RecordLabel[]
}

model Song {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  status    String

  record_id Int
  record    Record @relation(fields: [record_id], references: [id], onDelete: Cascade)

  title      String
  audioPath  String
  lyrics     String?
  isReadOnly Boolean

  songsFeats SongFeat[]
}

// INTERMEDIARY TABLES
model PlayAtEvent {
  id Int @id @default(autoincrement())

  artist_id Int
  artist    Artist @relation(fields: [artist_id], references: [id], onDelete: Cascade)

  event_id Int
  event    Event @relation(fields: [event_id], references: [id], onDelete: Cascade)
}

model SongFeat {
  id Int @id @default(autoincrement())

  artist_id Int
  artist    Artist @relation(fields: [artist_id], references: [id], onDelete: Cascade)

  song_id Int
  song    Song @relation(fields: [song_id], references: [id], onDelete: Cascade)
}

model RecordArtist {
  id Int @id @default(autoincrement())

  artist_id Int
  artist    Artist @relation(fields: [artist_id], references: [id], onDelete: Cascade)

  record_id Int
  record    Record @relation(fields: [record_id], references: [id], onDelete: Cascade)
}

model RecordLabel {
  record_id Int    @unique
  record    Record @relation(fields: [record_id], references: [id], onDelete: Cascade)

  label_id Int
  label    Label @relation(fields: [label_id], references: [id], onDelete: Cascade)
}
