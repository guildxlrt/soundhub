// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model UserAuth {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  email    String @unique
  password String

  artists Artist[]
}

model Artist {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  user_auth_id Int
  user         UserAuth @relation(fields: [user_auth_id], references: [id], onDelete: Cascade)

  name      String
  bio       String?
  members   String[]
  genres    String[]
  avatarUrl String?

  releases Release[]
  announce Announce[]
  events   Event[]
}

model Announce {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  artist_id Int
  artist    Artist @relation(fields: [artist_id], references: [id], onDelete: Cascade)

  title    String
  text     String
  imageUrl String?
  videoUrl String?
}

model Event {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  planner Int
  artist  Artist @relation(fields: [planner], references: [id], onDelete: Cascade)

  date     DateTime
  artists  Int[]
  title    String
  text     String
  imageUrl String?
}

model Release {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  artist_id Int
  artist    Artist @relation(fields: [artist_id], references: [id], onDelete: Cascade)

  title       String
  releaseType String
  descript    String?
  price       Int?
  genres      String[]
  coverUrl    String?

  songs Song[]
}

model Song {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  release_id Int
  release    Release @relation(fields: [release_id], references: [id], onDelete: Cascade)

  title     String
  audioUrl  String
  featuring Int[]
  lyrics    String?
}
